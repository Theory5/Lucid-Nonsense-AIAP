##this setup will be built and testing utilizing dynamic mapping in elasticsearch too
## The output and logs this script will eventually tackle will include
## tcpdump logs (from converted pcaps), apache2 logs, dionaea logs/output, kippo logs/output, bro logs, cuckoo logs and analyses, and misc.
## apache2... tested... works great!
input {
  file {
    type => "apache"
    path => ["/var/log/apache2/access.log", "/var/log/apache2/error.log"]
  }
## syslog... tested, works.
  file {
    type => "syslog"
    path => [ "/var/log/*.log", "/var/log/messages", "/var/log/syslog" ]
  }
## lumberjack, now known as logstash forwarder... tested and it works. see logstash-forwarder for types from HP
  lumberjack {
    port => 6782
    ssl_certificate => "/etc/ssl/certs/irregsync.crt"
    ssl_key => "/etc/ssl/certs/irregsync.key"
    type => "lumberjack"
  }
}

filter {
  if [type] == "apache" {
    grok {
      match => [ "message" , "%{COMBINEDAPACHELOG}" ]
    }
    date {
      match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
  }
  else if [type] == "syslog" {
    grok {
      match => [ "message" , "%{SYSLOGBASE}" ]
    }
    date {
    match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
  }
  else if [type] == "kippo" {
    grok {
##make sure you have the proper definitions!
      break_on_match => false
      match => [ "timestamp", "%{KIPPO_TIMESTAMP}",
                 "sshtype", "%{KIPPO_BODY_SSHSERVICE}",
                 "source port", "%{NUMBER:bytes}",
                 "src ip", "%{IP:src_ip>}",
                 "kippo login", "%{KIPPO_MSG_LOGIN}",
                 "message", "] 
    }
  }
  else if [type] == "dionaea" {
    grok {
      match => [ "message", "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day} %{TIME:time} : %{DATA:connection_type} \t %{DATA:connection_protocol}\t%{DATA:protocol}\t %{IP:srcip} \t%{DATA:srcport} \t %{IP:dstip} \t %{DATA:dstport} \t %{DATA:hostname}" ]
    }
    mutate {
      strip => [ "connection_protocol", "connection_type", "protocol", "srcport" , "dstport", "hostname" ]
    }
    mutate {
      add_field => [ "timestamp", "%{year}-%{month}-%{day} %{time}" ]
    }
    }
}
    
output {
  elasticsearch {
    host => localhost
  }
  stdout {
    codec => rubydebug
  }
}
